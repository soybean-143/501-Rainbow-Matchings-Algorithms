#Modified JÃ¼rgen algorithm - takes maximum when possible and a random edge for the final else, early termination
# uses the >=3(m-i)+1 bound, keeping terminating condition of source 3

!pip install igraph
import igraph as ig
import array as arr
import matplotlib.pyplot as plt

g = reg_new.copy() #reg example to check max issue
edge_colors = reg_edge_colors_new.copy() #it's coloring

print(edge_colors)
g.es["color"] = [edge_colors.get(i, "black") for i in range(len(g.es))] #Assigns edge color attribute per dictionary color
color_groups = {color: [] for color in  mpl.color_sequences['color_classes']}
for edge in g.es:
    color = edge["color"]
    if color in color_groups:
        color_groups[color].append(edge.index)

# plot
layout = g.layout_circle()
fig, ax = plt.subplots(figsize=(6, 6))
ig.plot(g, target=ax, layout=layout, edge_color= g.es["color"])
plt.title("Graph with Colored Edges Pre Algorithm")
plt.axis("off")
plt.show()

#Graph info
#print("Degree sequence:", g.degree())
#print("Number of vertices:", g.vcount())
#print("Number of edges:", g.ecount())

#############################

rain_choices = {} #initialize dictionary for tracking actions at each value of i to pull from for reverse
cond_sequence = {} #records values of i and the condition enacted so we can take the right info from rain_choices


def algo_jurg(g,edge_colors,m):

  for i in range(1,m+1): #m+1 accounts for terminating at i=m-1

    # Update color_groups to reflect current edges in the graph
    color_groups = {color: [] for color in  mpl.color_sequences['color_classes']}

    for edge in g.es:
      color = edge["color"]
      if color in color_groups:
        color_groups[color].append(edge.index)
        edge_color_size = [len(a) for a in color_groups.values()]
        #print(color_groups)

    if len(g.es) == 0: #Check if graph is empty
        print("Condition 1, Empty Terminate")
        print("i=",i)
        cond_sequence.setdefault(i, []).append(1)
        g_i = g.subgraph_edges(edges=[])
        rain_choices[i] = g_i
        print("cond_sequence=",cond_sequence)
        return (g,i)

    elif (max(g.degree()) >=  3*(m-i)+1): #Check if there is a vertex of suitably high degree
      print("Condition 2")
      print("i=",i)
      cond_sequence.setdefault(i, []).append(2)
      print("cond_sequence=",cond_sequence)
      satisfactory_vertices = []
      for v in g.vs: # Compare the degree of a vertex with the calculated minimum degree
        if g.degree(v) == max(g.degree()):
          satisfactory_vertices.append(v.index) # list of all max degree vert
      vert = random.choice(satisfactory_vertices) #chooses random from large enough
      print("vert=",vert)
      #############################
      edges_to_add = g.vs[vert].incident()
      g_i = g.subgraph_edges(edges_to_add, delete_vertices=False)
      for edge in g_i.es:
          original_edge = g.es.find(_source=edge.source, _target=edge.target)
          edge["color"] = original_edge["color"]
      rain_choices[i] = g_i

      # plot g_i
      layout = g_i.layout_circle()
      fig, ax = plt.subplots(figsize=(6, 6))
      ig.plot(g_i, target=ax, layout=layout, edge_color=g_i.es["color"])
      plt.title("G_i")
      plt.axis("off")
      plt.show()

      print("rain_choices=",rain_choices)
      #############################
      g.delete_edges(g.vs[vert].incident())

      satisfactory_vertices = [] #Resets list

      #plot
      layout = g.layout_circle()
      fig, ax = plt.subplots(figsize=(6, 6))
      ig.plot(g, target=ax, layout=layout, edge_color=g.es["color"])
      plt.title("Graph with Colored Edges")
      plt.axis("off")
      plt.show()


    elif (max(edge_color_size) >= 2*(m-i) + 1): #Check if there is a color class of suitably high cardinality
      print("Condition 3")
      print("i=",i)
      cond_sequence.setdefault(i, []).append(3)
      print("cond_sequence=",cond_sequence)
      print(2*(m-i)+1)
      lrg_enough_cc = []
      max_sufficient = []
      print("max color class size =",max(edge_color_size))
      for color in color_groups: #Finds max size color classes
          if len(color_groups[color]) >= 2 * (m - i) + 1 and len(color_groups[color]) > 0:
              lrg_enough_cc.append(color_groups[color])
      max_length = max(len(sublist) for sublist in lrg_enough_cc)
      max_sufficient = [a for a in lrg_enough_cc if len(a) == max_length]
      color_with_max_edges = random.choice(max_sufficient) #chooses random max size color class
      print("color_with_max_edges=",color_with_max_edges)
      index_with_max_edges = edge_color_size.index(max_length)
      color_with_max_edges = list(color_groups.keys())[index_with_max_edges]

      edges_to_delete = color_groups[color_with_max_edges] # Uses the color to pick correct edges
      #############################
      g_i = g.subgraph_edges(edges_to_delete, delete_vertices=False)
      for edge in g_i.es:
          original_edge = g.es.find(_source=edge.source, _target=edge.target)
          edge["color"] = original_edge["color"]
      rain_choices[i] = g_i

      # plot g_i
      layout = g_i.layout_circle()
      fig, ax = plt.subplots(figsize=(6, 6))
      ig.plot(g_i, target=ax, layout=layout, edge_color=g_i.es["color"])
      plt.title("G_i")
      plt.axis("off")
      plt.show()

      print("rain_choices=",rain_choices)
      #############################

      g.delete_edges(edges_to_delete) #deletes edges

      lrg_enough_cc = []  # Resets for next run
      max_sufficient = []

      # plot
      layout = g.layout_circle()
      fig, ax = plt.subplots(figsize=(6, 6))
      ig.plot(g, target=ax, layout=layout, edge_color=g.es["color"])
      plt.title("Graph with Colored Edges")
      plt.axis("off")
      plt.show()

    else:
      print("condition 4")
      print("i=",i)
      cond_sequence.setdefault(i, []).append(4)
      print("cond_sequence=",cond_sequence)
      if len(g.es) > 0: #Check if there are any edges left before making a choice
          rm_edge = random.choice(g.es) #If there is an edge, takes random in edge sequence
          print("rm_edge=",rm_edge)
          edge_cc_adj=[]
          for e in g.es:
            if e["color"] == rm_edge["color"]:
              edge_cc_adj.append(e.index)

          # Find the incident vertices of the edge
          source_vertex = rm_edge.source
          target_vertex = rm_edge.target

         #############################
          g_i = g.subgraph_edges(rm_edge, delete_vertices=False)
          for edge in g_i.es:
              original_edge = g.es.find(_source=edge.source, _target=edge.target)
              edge["color"] = original_edge["color"]
          rain_choices[i] = g_i

          # plot g_i
          layout = g_i.layout_circle()
          fig, ax = plt.subplots(figsize=(6, 6))
          ig.plot(g_i, target=ax, layout=layout, edge_color=g_i.es["color"])
          plt.title("G_i")
          plt.axis("off")
          plt.show()

          print("rain_choices=",rain_choices)
   #############################
          # Get the incident edges for both vertices
          incident_edges_source = g.incident(source_vertex)
          incident_edges_target = g.incident(target_vertex)

          # Combine the incident edges and remove duplicates (if any)
          incident_edges = list(set(incident_edges_source + incident_edges_target))
          edge_cc_adj.extend(incident_edges)
          g.delete_edges(edge_cc_adj)

          edge_cc_adj = [] #Reset for next run

      # plot
      layout = g.layout_circle()
      fig, ax = plt.subplots(figsize=(6, 6))
      ig.plot(g, target=ax, layout=layout, edge_color=g.es["color"])
      plt.title("Graph with Colored Edges")
      plt.axis("off")
      plt.show()

  return (g,"Terminating for i-1=m",i)
print(algo_jurg(g, edge_colors, 6)[1])
